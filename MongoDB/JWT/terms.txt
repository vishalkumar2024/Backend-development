
-> JSON Web Token - JWT is a secure, encoded token used to verify a userâ€™s identity
 and exchange information between a client and a server without repeatedly sending 
 sensitive credentials.

. It is most commonly used for authentication and authorization in modern web applications


->ðŸ”‘ How JWT Works

1. User Login:
The user logs in using their credentials (e.g., email and password).

2. Token Issued:
The server verifies the credentials of user and sends back a JWT token.

3. Token Storage:
The client stores the JWT (usually in localStorage or an HTTP-only cookie).

4. Authenticated Requests:
For latter requests, the client's browsers includes the JWT in the Authorization header.

5. Server Verification:
The server verifies the tokenâ€™s signature using a secret key before allowing access to protected routes.




-> A JWT has three parts, separated by dots (.): see- https://www.jwt.io/

xxxxx.yyyyy.zzzzz  - x=Header, y= Payload, z=Signature

 Part	             Description
------------------------------------------------------------------------------------
 Header           	Contains metadata about the token, such as the algorithm used 
 Payload         	Contains claims (data) â€” e.g., user ID, role, or expiration time.
 Signature	        Ensures the token wasnâ€™t tampered with. Created by hashing header and payload with a secret key.




-> Signing key/Secret Key - Itâ€™s used to digitally sign the token so that the server can:-

. Verify that the token was actually created by your server.
. Ensure that the token hasnâ€™t been modified or tampered with.

'Secret Key' is like your digital signature or password for your server to verify and
 trust JWT tokens. If anyone knows this secret, they can create fake tokens â€” which is
 a serious security risk.